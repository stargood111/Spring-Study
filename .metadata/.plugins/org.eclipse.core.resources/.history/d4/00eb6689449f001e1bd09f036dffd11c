package hello.core.beanfind;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.Map;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.NoUniqueBeanDefinitionException;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import hello.core.beanfind.ApplicationContextSameBeanFind.SameBeanConfig;
import hello.core.discount.DiscountPolicy;
import hello.core.discount.FixDiscountPolicy;
import hello.core.discount.RateDiscountPolicy;

public class ApplicationContextExtendsFindTest {

	
	   AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(TestConfig.class);

	   @Test
	   @DisplayName("부모 타입으로 조회시, 자식이 둘 이상 있으면, 중복 오류가 발생")
	   void findBeanByParentTypeDuplicate() {
//		  DiscountPolicy bean = ac.getBean(DiscountPolicy.class);
		  assertThrows(NoUniqueBeanDefinitionException.class,
				  () -> ac.getBean(DiscountPolicy.class));
	   }
	   @Test
	   @DisplayName("부모 타입으로 조회시, 자식이 둘 이상 있으면, 중복 오류가 발생")
	   void findBeanByParentTypeBeanName() {
		   DiscountPolicy rateDiscountPolicy = ac.getBean("rateDiscountPolicy1", DiscountPolicy.class);
		   assertThat(rateDiscountPolicy).isInstanceOf(RateDiscountPolicy.class);
	   }
	   @Test
	   @DisplayName("부모 타입으로 조회시, 자식이 둘 이상 있으면, 중복 오류가 발생")
	   void findBeanBySubType() {   
	   }
	   @Test
	   @DisplayName("부모 타입으로 모두 조회")
	   void findBeanByParentType() {
		   Map<String, DiscountPolicy> beansOfType = ac.getBeansOfType(DiscountPolicy.class);
		   assertThat(beansOfType.size()).isEqualTo(2);
		   for(String key : beansOfType.keySet()) {
			   System.out.println("key = " + key + " value = " +  beansOfType.get(key));
		   }
	   }
	   @Test
	   @DisplayName("부모 타입으로 모두 조회 - Object")
	   void findBeanByObjectType() {
		   Map<String,Object> beansOfType = ac.getBeansOfType(Object.class);
		   for(String key : beansOfType.keySet()) {
			   System.out.println("key = " + key + " value = " +  beansOfType.get(key));
	   }
	   
	   
	   @Configuration
	   static class TestConfig{
		   @Bean
		   public DiscountPolicy rateDiscountPolicy1() {
			   return new RateDiscountPolicy();
		   }
		   
		   @Bean
		   public DiscountPolicy fixDiscountPolicy2() {
			   return new FixDiscountPolicy();	   
			   }
	   }
}
